[build-system]
requires = ["flit_core==3.9.0"]
build-backend = "flit_core.buildapi"

[project]
name = "propshop"
version = "0.1.3"
description = "Your one-stop shop for material properties."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
classifiers = ["License :: OSI Approved :: MIT License"]
dependencies = [
    "dynaconf>=3.1.12",
    "pydantic>=2.5.2",
    "numpy>=1.26.2",
    "pandas>=2.0.0",
    "pyarrow>=14.0.1",
    "scipy>=1.10.1",
]

[[project.authors]]
name = "Blake Naccarato"
email = "blake.naccarato+propshop@gmail.com"

[project.urls]
Changes = "https://blakeNaccarato.github.io/propshop/changelog.html"
Docs = "https://blakeNaccarato.github.io/propshop"
Home = "https://github.com/blakeNaccarato/propshop"
Tracker = "https://github.com/blakeNaccarato/propshop/issues"

[tool.fawltydeps]
output_format = "human_detailed"
code = ["src"]
deps = ["pyproject.toml"]
ignore_unused = [
    "pyarrow", # propshop.__init__: pd.set_option("mode.string_storage", "pyarrow")
]
[tool.fawltydeps.custom_mapping]
ipykernel = ["IPython"]

[tool.pyright]
# Paths
include = ["src", "tests", "docs"]
# Stubs
stubPath = "submodules/typings"
# Type inference helps with untyped upstream but can be unpredictable
useLibraryCodeForTypes = true
# Sets most checks to "error". See overrides below
typeCheckingMode = "strict"
# These flags are "true" by default in strict mode
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
# Override these errors
reportConstantRedefinition = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnusedClass = "none"
reportUnusedCoroutine = "none"
reportUnusedExpression = "none"
reportUnusedFunction = "none"
reportUnusedImport = "none"
reportUnusedVariable = "none"
reportUntypedBaseClass = "none"
# Override these disabled diagnostics
reportShadowedImports = "error"
reportCallInDefaultInitializer = "error"
reportPropertyTypeMismatch = "error"
reportUninitializedInstanceVariable = "error"
# These diagnostics are "none" by default in strict mode
reportImplicitStringConcatenation = "none"
reportMissingSuperCall = "none"
reportUnnecessaryTypeIgnoreComment = "none"
reportUnusedCallResult = "none"

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
fix = true
cache-dir = ".cache/.ruff_cache"
select = ["ALL"]
src = ["src", "tests"]
target-version = "py311"
extend-exclude = ["submodules", ".github"]
ignore = [
    "ANN",     # Don't require type annotations
    "ARG005",  # Allow unused lambda argument. For consistency across df pipelines.
    "C408",    # Allow dict calls
    "COM",     # Allow magic commas and magic missing commas
    "D10",     # Missing docstrings
    "D20",     # Don't reformat docstrings in these ways
    "D213",    # Multi-line docstring summary should start at the second line
    "D402",    # False positives for parens in first line
    "DTZ",     # Timezones are important, but only contextually necessary.
    "E501",    # Don't check line length. Black handles this.
    "EM",      # Don't check for exception message issues
    "ERA",     # False positives. Don't get rid of commented out code.
    "FBT",     # Allow boolean "traps"
    "FIX002",  # Allow TODOs
    "F841",    # Don't check for or fix unused variables
    "FLY002",  # Allow different string representations
    "G0",      # Allow f-strings, etc. in Loguru logging
    "INP001",  # False positives. Checks for packages missing `__init__.py`
    "ISC",     # False positives. Implicit string concatenation is fine.
    "PD013",   # Allow `stack` instead of `melt`. They're not a direct swap.
    "PD101",   # Allow use of nunique(). False positives
    "PD901",   # Allow `df` variable name. We are all consenting adults here.
    "PD011",   # Allow use of `.values`. False positives.
    "PGH003",  # Until black stops wrapping special ignores, let's allow bare
    "PIE804",  # Allow dict unpack even if unnecessary, consisent for df.assign{**...}
    "PLR0913", # Allow more than five function arguments
    "PLR2004", # Allow magic values. This check is too sensitive
    "PLW2901", # For loop variable
    "RET",     # Return checks are flaky, Sourcery does fine analysing these paths
    "S301",    # Don't warn about pickling. Allow me to shoot myself in the foot.
    "TCH",     # Type checking linter doesn't play nicely with pydantic
    "TD",      # Disable to-do validation. Too pedantic for now.
    "TRY003",  # Allow long exception messages
    "W2",      # Allow whitespace issues. Fixed automatically by black.
]

[tool.ruff.format]
preview = true
skip-magic-trailing-comma = true

[tool.ruff.isort]
split-on-trailing-comma = false

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.extend-per-file-ignores]
"**/*.ipynb" = [
    "B018", # Allow "useless" expressions, which do suppress outputs in notebooks
    "F821", # Allow undefined names, such as `display`
    "S101", # Allow assert
    "T201", # Allow print in notebooks
]
"docs/**" = [
    "E402", # Need to allow imports below patches in docs notebooks
]
"tests/**" = [
    "ARG001", # Allow unused arguments in tests
    "S101",   # Allow assert in tests
]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Argument", "typer.Option"]

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator"]
